1.	暂时修改

linux可以在运行时修改内核参数，而不必重启系统，这点是通过/proc虚拟文件系统实现的。
/proc/sys存放大多数的内核参数，并且设计成可以在系统运行的同时进行修改。
方法一：修改/proc下内核参数文件
例如：cat /proc/sys/kernel/core_pattern
echo '%e.core.%p' > /proc/sys/kernel/core_pattern
该修改实际上只是修改了内存值，在reboot后，系统会读取/etc/sysctl.conf文件获取内核参数
（注意：这是虚拟文件，所有这些文件实际上并不存在。为了保证修改数据的完整性，不要用编辑器打开编辑修改，因为在你修改的同时，可能内核也正在修改该数据，那么保存的值，将不是你期望的）

2.	永久修改

由于Linux的内核参数信息都存在内存中，因此可以通过命令直接修改，并且修改后直接生效。但是，当系统重新启动后，原来设置的参数值就会丢失，而系统每次启动时都会自动去/etc/sysctl.conf文件中读取内核参数，因此将内核的参数配置写入这个文件中，是一个比较好的选择。
　　首先打开/etc/sysctl.conf文件，查看如下两行的设置值，这里是：
　　kernel.shmall = 2097152
　　kernel.shmmax = 4294967295 如果系统默认的配置比这里给出的值大，就不要修改原有配置。同时在/etc/sysctl.conf文件最后，添加以下内容：
　　fs.file-max = 6553600 
　　kernel.shmmni = 4096 
　　kernel.sem = 250 32000 100 128 
　　net.ipv4.ip_local_port_range = 1024 65000 
　　net.core.rmem_default = 4194304 
　　net.core.rmem_max = 4194304 
　　net.core.wmem_default = 262144 
　　net.core.wmem_max = 262144 
　　这里的“fs.file-max = 6553600”其实是由“fs.file-max = 512 * PROCESSES”得到的，我们指定PROCESSES的值为12800，即为“fs.file-max =512 *12800”。
　　sysctl.conf文件修改完毕后，接着执行“sysctl -p”使设置生效。
　　［root@localhost ~］# sysctl -p 常用的内核参数的含义如下。
　　kernel.shmmax：表示单个共享内存段的最大值，以字节为单位，此值一般为物理内存的一半，不过大一点也没关系，这里设定的为4GB，即“4294967295/1024/1024/1024=4G”。
　　kernel.shmmni：表示单个共享内存段的最小值，一般为4kB，即4096bit.
　　kernel.shmall：表示可用共享内存的总量，单位是页，在32位系统上一页等于4kB，也就是4096字节。
　　fs.file-max：表示文件句柄的最大数量。文件句柄表示在Linux系统中可以打开的文件数量。
　　ip_local_port_range：表示端口的范围，为指定的内容。
　　kernel.sem：表示设置的信号量，这4个参数内容大小固定。
　　net.core.rmem_default：表示接收套接字缓冲区大小的缺省值（以字节为单位）。
　　net.core.rmem_max ：表示接收套接字缓冲区大小的最大值（以字节为单位）
　　net.core.wmem_default：表示发送套接字缓冲区大小的缺省值（以字节为单位）。
　　net.core.wmem_max：表示发送套接字缓冲区大小的最大值（以字节为单位）。
